{{define "swiper"}}
{{$mime := "" -}}

{{range Batch .Assets -}}
<div class="row">
	{{- range .}}
		{{$mime := .Mime -}}
	<div class="thumbnail column" lightbox-toggle>
		{{.Render}}
	</div>
	{{- end}}
</div>
{{end}}
<!--
	license for Swiper Lightbox:
	Copyright (c) 2022 by Dalton Walsh (https://codepen.io/daltonw/pen/NWpGMrb)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.-->
<script>
let swiper;
window.globals = {};
const body = document.getElementsByTagName("body")[0];
const lightboxImages = document.querySelectorAll("[lightbox-toggle] img, [lightbox-toggle] video");
const initLightbox = lightboxImages.length > 0;
const destroySwiper = (swiper, timeout) => {
  setTimeout(() => {
    swiper.destroy();
  }, timeout);
};

const createLightboxSkeleton = () => {
  // Create skeleton for lightbox
  const lightbox = document.createElement("div");
  const lightboxContainer = document.createElement("div");
  const lightboxClose = document.createElement("div");
  const swiperContainer = document.createElement("div");
  const swiperWrapper = document.createElement("div");
  const swiperBtnNext = document.createElement("div");
  const swiperBtnPrev = document.createElement("div");
  const swiperPagination = document.createElement("div");

  // Add classes
  lightbox.classList.add("c-lightbox");
  lightboxContainer.classList.add("c-lightbox__container");
  lightboxClose.classList.add("c-lightbox__close");
  lightboxClose.setAttribute("tabindex", "0");
  lightboxClose.innerHTML = "X";
  swiperContainer.classList.add("swiper-container");
  swiperWrapper.classList.add("swiper-wrapper");
  swiperBtnNext.classList.add("swiper-button-next");
  swiperBtnPrev.classList.add("swiper-button-prev");
  swiperPagination.classList.add("swiper-pagination");

  // Append created divs
  lightboxContainer.appendChild(lightboxClose);
  swiperContainer.appendChild(swiperWrapper);
  swiperContainer.appendChild(swiperBtnNext);
  swiperContainer.appendChild(swiperBtnPrev);
  swiperContainer.appendChild(swiperPagination);
  lightboxContainer.appendChild(swiperContainer);
  lightbox.appendChild(lightboxContainer);
  body.appendChild(lightbox);

  // Set variables to reference the lightbox
  globals.lightboxRef = document.querySelector(".c-lightbox");
  globals.swiperWrapperRef = document.querySelector(
    ".c-lightbox .swiper-wrapper"
  );
};

if (initLightbox) {
  createLightboxSkeleton();

  // The rest of the code will go here
  lightboxImages.forEach(function (el, index) {
    // Add click function to lightbox images
    el.addEventListener("click", imageClick, false);

    function imageClick() {
      // Clear swiper before trying to add to it
      globals.swiperWrapperRef.innerHTML = "";

      // Loop through images with lightbox data attr
      // Create html for lightbox carousel
				lightboxImages.forEach(function (asset) {
					// Create clone of current image in loop
					//const media = asset.cloneNode(true);
					const type = asset.nodeName;
					if (type.toLowerCase() === "video") {
						var media = document.createElement("video");
						media.src = asset.src
						media.muted = {{.Html.video.muted}};
						media.loop = {{.Html.video.loop}};
						{{if .Html.video.autoplay}}
							media.autoplay = true;
						{{end}}
						{{if .Html.video.controls}}
							media.controls = true;
						{{end}}
					} else if (type.toLowerCase() === "img") {
						var media = document.createElement("img");
						media.src = asset.alt
					};
					media.className = "swiper-zoom-target slide swiper-lazy";
					// Create divs
					const slide = document.createElement("div");
					const imageContainer = document.createElement("div");
					const zoomContainer = document.createElement("div");
					const lazyContainer = document.createElement("div");
					// Add classes
					slide.classList.add("swiper-slide");
					imageContainer.classList.add("c-lightbox__image");
					zoomContainer.classList.add("swiper-zoom-container");
					lazyContainer.classList.add("swiper-lazy-preloader");
					// Append images to the slides, then slides to swiper wrapper
					zoomContainer.appendChild(media);
					zoomContainer.appendChild(lazyContainer);
					imageContainer.appendChild(zoomContainer);
					slide.appendChild(imageContainer);
					globals.swiperWrapperRef.appendChild(slide);
				});

      // Init Swiper
      swiper = new Swiper(".c-lightbox .swiper-container", {
        initialSlide: index,
        loop: true,
        slidesPerView: 1,
				preloadImages: false,
				lazy: true,
        speed: 750,
        spaceBetween: 16,
        watchOverflow: true,
        navigation: {
          nextEl: ".swiper-button-next",
          prevEl: ".swiper-button-prev"
        },
        pagination: {
          el: ".swiper-pagination",
          type: "fraction"
        },
				zoom: {
					maxRatio: 3.5,
					minRation: 1,
				},
        keyboard: {
          enabled: true,
					pageUpDown: true,
          onlyInViewport: true
        },
        mousewheel: {
          sensitivity: 1,
          forceToAxis: true,
          invert: true
        }
      });

      // Add the class to open the lightbox
      // Add overflow hidden to the body to prevent scrolling
      globals.lightboxRef.classList.add("open");
      body.classList.add("overflowHidden");
    }
  });

  // Close lightbox on click
  document.addEventListener(
    "click",
    ({ target }) => {
      if (target.matches(".c-lightbox__close")) {
        destroySwiper(swiper, 250);
        globals.lightboxRef.classList.remove("open");
        body.classList.remove("overflowHidden");
      }
    },
    false
  );

  // Close lightbox on escape key press
  document.addEventListener("keydown", ({ key }) => {
    if (key === "Escape") {
      destroySwiper(swiper, 250);
      globals.lightboxRef.classList.remove("open");
      body.classList.remove("overflowHidden");
    }
  });
}
</script>
{{end -}}
